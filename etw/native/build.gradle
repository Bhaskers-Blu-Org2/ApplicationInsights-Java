plugins {
    id 'cpp-library'
    id 'cpp-unit-test'
}

version = '0.1.0'
// archivesBaseName = "applicationinsights-java-etw-provider"

def javaIncludeDir = new File(System.env.'JAVA_HOME', "include")
def programFilesX86 = System.env.'ProgramFiles(x86)' ?: 'C:\\Program Files (x86)'

def winSdkDir = "$programFilesX86\\Windows Kits\\8.1"
if (System.env.APPINSIGHTS_WIN_SDK_PATH) {
    winSdkDir = System.env.APPINSIGHTS_WIN_SDK_PATH
    println "Using custom Windows SDK path: $winSdkDir"
}
def vsToolsDir = "$programFilesX86\\Microsoft Visual Studio 14.0"
if (System.env.APPINSIGHTS_VS_PATH) {
    vsToolsDir = System.env.APPINSIGHTS_VS_PATH
    println "Using custom Visual Studio Tools path: $vsToolsDir"
}

def winSdkVersion = "10.0.18362.0"

toolChains.withType(VisualCpp).configureEach  {
    // FIXME can this toolchain be addressed directly?
    it.installDir vsToolsDir
    it.windowsSdkDir winSdkDir
}

library {
    linkage = [ Linkage.SHARED ]
    targetMachines = [ machines.windows.x86, machines.windows.x86_64 ]
    dependencies {
        api files(file("$winSdkDir/Lib/$winSdkVersion/um/x64/advapi32.lib"))
    }
}

tasks.withType(CppCompile).configureEach {
    it.includes file("${System.env.JAVA_HOME}/include")
    it.includes file("${System.env.JAVA_HOME}/include/win32")
}

// tasks.withType(LinkExecutable).configureEach {
//     // FIXME can this be found automatically?
//     libs = files(file("$winSdkDir/Lib/$winSdkVersion/um/x64/advapi32.lib"))
// }
plugins {
    id 'cpp-library'
    id 'cpp-unit-test'
    id 'visual-studio'
}

// TODO honor skipWinNative property

def javaIncludeDir = new File(System.env.'JAVA_HOME', "include")
def programFilesX86 = System.env.'ProgramFiles(x86)' ?: 'C:/Program Files (x86)'

// TraceLoggingProvider.h in Windows 10 SDK
def winSdkDir = "$programFilesX86/Windows Kits/10"
if (System.env.APPINSIGHTS_WIN_SDK_PATH) {
    winSdkDir = System.env.APPINSIGHTS_WIN_SDK_PATH
    logger.info "Windows SDK path set with environment variable, APPINSIGHTS_WIN_SDK_PATH"
}
def vsToolsDir = "$programFilesX86/Microsoft Visual Studio 14.0"
if (System.env.APPINSIGHTS_VS_PATH) {
    vsToolsDir = System.env.APPINSIGHTS_VS_PATH
    logger.info "Visual Studio Build Tools path set with environment variable, APPINSIGHTS_VS_PATH"
}

def winSdkLibPath
if (System.env.APPINSIGHTS_WIN_SDK_LIB_PATH) {
    winSdkLibPath = System.env.APPINSIGHTS_WIN_SDK_LIB_PATH
    logger.info "Windows SDK Lib path set with environemnt variable, APPINSIGHTS_WIN_SDK_LIB_PATH=${System.env.APPINSIGHTS_WIN_SDK_LIB_PATH}"
} else {
    winSdkLibPath = "$winSdkDir/Lib/10.0.18362.0/um"
}

logger.info "Windows SDK:  $winSdkDir"
logger.info "SDK Lib path: $winSdkLibPath"
logger.info "Visual Studio Build Tools: $vsToolsDir"

toolChains.withType(VisualCpp).configureEach  {
    // FIXME can this toolchain be addressed directly?
    it.installDir vsToolsDir
    it.windowsSdkDir winSdkDir
}

ext {
    headersDir = "$projectDir/src/main/headers"
}
library {
    baseName = "applicationinsights-java-etw-provider"
    linkage = [ Linkage.SHARED ]
    targetMachines = [ machines.windows.x86, machines.windows.x86_64 ]
    privateHeaders.from file(headersDir)
    dependencies {
        implementation files(file("$winSdkLibPath/x64/advapi32.lib"))
        implementation files(file("$winSdkLibPath/x86/advapi32.lib"))
    }
}

// NOTE: these options apply to Visual Studio Build Tools (cl.exe)
tasks.withType(CppCompile).configureEach {
    includes file("${System.env.JAVA_HOME}/include")
    includes file("${System.env.JAVA_HOME}/include/win32")

    compilerArgs.add '/W4'
    compilerArgs.add '/std:c++14'
    compilerArgs.add '/EHsc'
    compilerArgs.add '/sdl'
    if (isRelease) {
        macros.put("NDEBUG", null)
        compilerArgs.add '/O2' // optimize for speed
        compilerArgs.add '/MD' // multithreaded
    } else {
        macros.put("DEBUG", null)
        macros.put("_DEBUG", null)
        compilerArgs.add '/MDd' // multithreaded, debug mode
    }
}

// TODO: process resources

// NOTE: these options apply to Visual Studio Build Tools (link.exe)
tasks.withType(LinkSharedLibrary).configureEach {

}

project.afterEvaluate {
    ['Release', 'Debug'].each { v ->
        def ppBothArchTask = tasks.register("preprocess$v") {
            description = "Runs preprocessor for $v variant, all architectures"
        }
        ['X86', 'X86-64'].each { a ->
            def dllFilename = "${project.library.baseName.get()}-${a.toLowerCase()}.dll"
            tasks.named("link$v$a").configure {
                linkedFile = file("${linkedFile.asFile.get().parent}/$dllFilename")
            }
            def ppArchTask = tasks.register("preprocess$v$a", CppCompile) {
                description = "Runs preprocessor for $v variant, for $a architecture"
                compilerArgs.add '/P'
            }
            ppBothArchTask.configure {
                dependsOn ppArchTask
            }
            tasks.named("compile$v${a}Cpp").configure {
                macros.put("DLL_FILENAME", dllFilename.toString())
            }
        }
    }
}


plugins {
    id 'java-library'
}

repositories {
    mavenCentral()
}


configurations {
    jni64 {
        transitive = false
    }
    jni32 {
        transitive = false
    }
    provided {
        transitive = false
    }
    compileOnly.extendsFrom provided
    testRuntime.extendsFrom provided
}


dependencies {
    implementation 'org.apache.commons:commons-lang3:3.7'
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.slf4j:slf4j-api:1.7.26'
    implementation 'com.google.guava:guava:27.1-android'

    provided project(path: ':core')
    provided project(path: ':ApplicationInsightsInternalLogger')

    jni32 project(path: ':etw:native', configuration: "${isRelease ? 'release' : 'debug'}X86RuntimeElements")
    jni64 project(path: ':etw:native', configuration: "${isRelease ? 'release' : 'debug'}X86-64RuntimeElements")

    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'junit:junit:4.12'
}

archivesBaseName = "applicationinsights-java-etw-provider"

tasks.register('grabDllsAsResources', Copy) {
    dependsOn project(':etw:native').tasks.named("assemble${isRelease ? 'Release' : 'Debug'}X86").get()
    dependsOn project(':etw:native').tasks.named("assemble${isRelease ? 'Release' : 'Debug'}X86-64").get()
    
    from configurations.jni32.files
    from configurations.jni64.files
    include '*.dll'
    into "${sourceSets.main.output.resourcesDir}"
}
processResources.dependsOn 'grabDllsAsResources'
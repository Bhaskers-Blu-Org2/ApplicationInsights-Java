/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
plugins {
    id 'java-library'
}

repositories {
    mavenCentral()
}

apply from: "$buildScriptsDir/common-java.gradle"
apply from: "$buildScriptsDir/provided-configuration.gradle"

configurations {
    jni64 {
        transitive = false
    }
    jni32 {
        transitive = false
    }
    provided {
        transitive = false
    }
    testRuntime.extendsFrom provided
}

def jniSrcDir = 'src/main/jni'
sourceSets {
    main {
        java {
            srcDir jniSrcDir
        }
    }
}

archivesBaseName = "applicationinsights-java-etw-provider"

println "project ${project.name} prop: ai.etw.native.build=${project.properties['ai.etw.native.build']}"

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.7'
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.slf4j:slf4j-api:1.7.26'

    provided project(path: ':core')

    jni32 project(path: ':etw:native', configuration: "${project.properties['ai.etw.native.build']}X86RuntimeElements")
    jni64 project(path: ':etw:native', configuration: "${project.properties['ai.etw.native.build']}X86-64RuntimeElements")

    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'junit:junit:4.12'
}

tasks.register('generateNativeHeaders', Exec) {
    // could be made generic if more native classes existed

    def targetClass = 'com.microsoft.applicationinsights.agentc.internal.diagnostics.etw.EtwProvider'
    def outputDir = project(':etw:native').ext.headersDir
    def outputFilename = 'jni_etw_provider.h'

    workingDir buildDir
    commandLine "${System.env.JAVA_HOME}/bin/javah", "-jni", "-force", "-v", "-o", "$outputDir/$outputFilename", "-classpath", "$buildDir/classes/java/main", targetClass

    inputs.dir(file("$projectDir/$jniSrcDir"))
    outputs.file(file("$outputDir/$outputFilename"))

    doFirst {
        if (!file(outputDir).exists()) {
            throw new GradleException("output dir does not exists: $outputDir")
        }
    }
}

tasks.register('processNativeResources', Copy) {
    def useReleaseBuild = project.getProperty('ai.etw.native.build').equalsIgnoreCase('release')
    dependsOn project(':etw:native').tasks.named("assemble${useReleaseBuild ? 'Release' : 'Debug'}X86").get()
    dependsOn project(':etw:native').tasks.named("assemble${useReleaseBuild ? 'Release' : 'Debug'}X86-64").get()

    from configurations.jni32.files
    from configurations.jni64.files
    include '*.dll'
    into "${sourceSets.main.output.resourcesDir}"
}

tasks.named('processResources').configure {
    dependsOn 'processNativeResources'
    mustRunAfter 'generateNativeHeaders'
}

tasks.named('test').configure {
    def testprops =
        project.properties.findAll {
            it.key.startsWith('ai.tests.')
        } +
        project.properties.findAll {
            it.key.startsWith('ai.etw.')
        }
    systemProperties testprops
    // jvmArgs '-Xcheck:jni'
    // jvmArgs '-verbose:jni'
}
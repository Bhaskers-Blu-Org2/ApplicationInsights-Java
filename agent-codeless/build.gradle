/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

plugins {
    id 'com.github.johnrengelman.shadow'
}

apply from: "$buildScriptsDir/common-java.gradle"
apply from: "$buildScriptsDir/publishing.gradle"

def instrumentationVersion = '0.14.9'

def shadowPrefix = 'com.microsoft.applicationinsights.agentc.shadow'

sourceSets {
    devtest {
        java {
            srcDir file('src/devtest/java')
        }
        resources {
            srcDir file('src/devtest/resources')
        }
        compileClasspath = sourceSets.main.output + configurations.compile
        runtimeClasspath = output + compileClasspath + configurations.runtime
    }
}

configurations {
    devtest
}

shadowJar() {

    archiveClassifier = 'intermediate'
    mergeServiceFiles()
    destinationDirectory = file("${project.buildDir}/intermediate")
    dependencies {
        exclude(dependency {
            it.moduleGroup == 'org.glowroot.instrumentation' &&
                    it.moduleName != 'instrumentation-api' &&
                    it.moduleName != 'instrumentation-engine'
        })
    }

    relocate('org.objectweb.asm', "${shadowPrefix}.org.objectweb.asm")
    relocate('org.slf4j', "${shadowPrefix}.org.slf4j")
    relocate('ch.qos.logback', "${shadowPrefix}.ch.qos.logback")
    relocate('com.google', "${shadowPrefix}.com.google")
    relocate 'org.checkerframework', "${shadowPrefix}.org.checkerframework"
    relocate 'javax.annotation', "${shadowPrefix}.javax.annotation"
    relocate 'org.codehaus.mojo.animal_sniffer', "${shadowPrefix}.org.codehaus.mojo.animal_sniffer"
    relocate 'com.squareup.moshi', "${shadowPrefix}.com.squareup.moshi"
    relocate 'okio', "${shadowPrefix}.okio"

    // this shades internal use of java util logging which is needed to prevent java util logging from being initialized
    // early (e.g. in the case of jboss which wants to do some setup before jul is initialized)
    relocate('java.util.logging', 'org.glowroot.instrumentation.engine.jul')

    // shade extra stuff from core
    relocate 'org.apache.http', "${shadowPrefix}.org.apache.http"
    relocate 'eu.infomas.annotation', "${shadowPrefix}.eu.infomas.annotation"
    relocate 'org.apache.commons', "${shadowPrefix}.org.apache.commons"

    relocate 'com.microsoft.applicationinsights.core', "${shadowPrefix}.ai.core"
    relocate 'com.microsoft.applicationinsights.internal', "${shadowPrefix}.ai.internal"
    relocate 'com.microsoft.applicationinsights.channel', "${shadowPrefix}.ai.channel"
    relocate 'com.microsoft.applicationinsights.common', "${shadowPrefix}.ai.common"
    relocate 'com.microsoft.applicationinsights.extensibility', "${shadowPrefix}.ai.extensibility"
    relocate 'com.microsoft.applicationinsights.telemetry', "${shadowPrefix}.ai.telemetry"
    relocate 'com.microsoft.applicationinsights.web', "${shadowPrefix}.ai.web"
    relocate 'com.microsoft.applicationinsights.TelemetryClient', "${shadowPrefix}.ai.TelemetryClient"
    relocate 'com.microsoft.applicationinsights.TelemetryConfiguration', "${shadowPrefix}.ai.TelemetryConfiguration"

    relocate('logback.configurationFile', 'ai.logback.configurationFile')
    relocate('logback.xml', 'ai.logback.xml')
    relocate('logback.groovy', 'ai.logback.groovy') // to prevent accidentally picking up from user's class path
    relocate('logback-test.xml', 'ai.logback-test.xml') // to prevent accidentally picking up from user's class path

    relocate('glowroot.debug', 'ai.debug') // system property names

    // excluding commons-logging from core, and replacing it with jcl-over-slf4j
    exclude 'com/microsoft/applicationinsights/core/dependencies/apachecommons/logging/**'
    relocate('org.apache.commons.logging', "${shadowPrefix}.ai.core.dependencies.apachecommons.logging")

    exclude 'META-INF/maven/**'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/services/javax.servlet.ServletContainerInitializer'
    exclude 'META-INF/proguard/**'
    exclude 'mozilla/**'
    exclude 'commons-logging.properties'
    exclude 'module-info.class'

    exclude 'module-info.class'

    // prevent duplicate files
    exclude 'LICENSE'
    exclude 'NOTICE'

    // errorprone annotations are a problem in the bootstrap class loader for Java 9 because they depend on
    // javax.lang.model.element.Modifier which is no longer in the bootstrap class loader in Java 9, and this causes
    // spring class path scanning to fail when trying to read com.google.errorprone.annotations.ForOverride
    // (java.lang.NoClassDefFoundError: [Ljavax/lang/model/element/Modifier;)
    exclude 'com/google/errorprone/**'
    exclude 'com/microsoft/applicationinsights/core/dependencies/google/errorprone/**'
}

task shadowJar2(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {

    dependsOn shadowJar

    from {
        zipTree(shadowJar.archiveFile)
    }

    configurations = [project.configurations.runtime]

    archiveClassifier = ''
    mergeServiceFiles()

    dependencies {
        include(dependency {
            it.moduleGroup == 'org.glowroot.instrumentation' &&
                    it.moduleName != 'instrumentation-api' &&
                    it.moduleName != 'instrumentation-engine'
        })
    }

    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
        resource = 'META-INF/instrumentation.list'
    }

    manifest {
        attributes("Premain-Class": "com.microsoft.applicationinsights.agentc.internal.Premain",
                "Can-Redefine-Classes": "true",
                "Can-Retransform-Classes": "true",
                "agent-sdk-version": project.version
        )
    }
}

archivesBaseName = 'applicationinsights-agent-codeless'

task devtestJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveClassifier = 'devtest'
    dependsOn devtestClasses, assemble
    from zipTree(file("$buildDir/libs/${project.archivesBaseName}-${project.version}.jar")) // shadowJar2.archiveFile doesn't work
    from sourceSets.devtest.output
    configurations = []
    manifest = shadowJar2.manifest
    exclude 'LICENSE'
    exclude 'NOTICE'

    relocate 'org.slf4j', "${shadowPrefix}.org.slf4j"
}

artifacts {
    devtest devtestJar
}

jar {
    dependsOn shadowJar2
    enabled = false
}
def logbackContribVersion = '0.1.5'
dependencies {
    compile 'org.slf4j:slf4j-api:1.7.26'
    compile 'org.slf4j:jcl-over-slf4j:1.7.26' // this is needed to pick up logging from apache http client
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile "ch.qos.logback.contrib:logback-json-classic:$logbackContribVersion"

    // not using gson because it has dependency on java.sql.*, which is not available in Java 9+ bootstrap class loader
    // only complaint so far about moshi is that it doesn't give line numbers when there are json formatting errors
    compile 'com.squareup.moshi:moshi:1.8.0'

    compile "org.glowroot.instrumentation:instrumentation-engine:$instrumentationVersion"
    compile "com.google.guava:guava:27.1-android"
    compile "org.glowroot.instrumentation:instrumentation-api:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-executor:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-servlet:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-netty:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-jms:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-kafka:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-spring:$instrumentationVersion" // need for operation name
    runtime "org.glowroot.instrumentation:instrumentation-jaxrs:$instrumentationVersion" // need for operation name
    runtime "org.glowroot.instrumentation:instrumentation-struts:$instrumentationVersion" // need for operation name
    runtime "org.glowroot.instrumentation:instrumentation-jdbc:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-redis:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-mongodb:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-apache-http-client:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-okhttp:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-http-url-connection:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-log4j:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-logback:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-java-util-logging:$instrumentationVersion"
    runtime(project(path: ':instrumentation:azure-functions'))

    compile(project(path: ':core'))
    compile(project(path: ':etw:java'))

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'com.github.stefanbirkner:system-rules:1.19.0'
    testCompile 'org.mockito:mockito-core:1.10.19'
}

// region Publishing properties

projectPomName = project.msftAppInsights + " Codeless Java Agent"
projectPomDescription = "This is the Codeless Java agent of " + project.msftAppInsightsJavaSdk

whenPomConfigured = { p ->
    p.dependencies = []
}

task verifyAgentJarContents {
    dependsOn jar
    Set expectedEntries = []
    // jar_contents.regex should have one pattern per line
    file("$projectDir/jar_contents.regex").eachLine {
        expectedEntries << it
    }
    doLast {
        def file = tasks.jar.archiveFile.get().asFile
        def extraEntries = []
        Set foundEntries = []
        def acceptableEntry = { entry ->
            expectedEntries.each { pattern ->
                def result = entry.name.matches(pattern)
                if (result) {
                    foundEntries << pattern
                }
                result
            }
        }

        new java.util.jar.JarFile(file).withCloseable { jarfile ->
            jarfile.entries().each {
                if (!acceptableEntry(it)) {
                    extraEntries << it.name
                }
            }
        }

        def error = ""
        Set missingEntries = expectedEntries - foundEntries
        if (!missingEntries.empty) {
            error += "  missing entries: $missingEntries\n"
        }
        if (!extraEntries.empty) {
            error += "  unexpected entries: $extraEntries\n"
        }
        if (!error.empty) {
            throw new RuntimeException("${file.name} has issues:\n$error")
        }
        logger.info "${file.name} verified successfully."
    }
}
tasks.assemble.dependsOn verifyAgentJarContents
// endregion Publishing properties

// creates tasks for each
def setups = []
file("$projectDir/package").eachDir {
    def name = it.name
    def path = it.absoluteFile
    def targetDir = "$buildDir/setup/$name"
    def targetDirRelative = "${buildDir.name}/setup/$name"
    def sourceDir = it.parent
    def taskName = "setup${name.capitalize()}"
    tasks.register(taskName, Copy) {
        group = "Local Dev Setup"
        description = "Copies agent jar and resource files into $targetDirRelative for use in testing."
        logger.info "Configuring $taskName: src=${path}, dest=$targetDir"
        from(path) {
            include "**/**"
        }
        def jarFiles = []
        from(tasks.jar.archiveFile.asFile.get().parent) {
            include "*.jar"
            eachFile { jf ->
                jarFiles << jf.file.absolutePath
            }
        }
        into targetDir
        dependsOn assemble
        doLast {
            logger.quiet "Dev Setup for ${name.capitalize()}:\n"
            def agentArgs = jarFiles.collect {
                "  -javaagent:$it\n"
            }.join("  OR\n")
            logger.quiet agentArgs
        }
    }
}
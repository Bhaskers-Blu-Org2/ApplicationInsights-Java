/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

// This contains the common build script code for each logging appender.
// The :logging:common project is not released, but is repackaged into each appender jar.

apply plugin: 'com.github.johnrengelman.shadow'

apply from: "$buildScriptsDir/common-java.gradle"
apply from: "$buildScriptsDir/publishing.gradle"

configurations {
    common { // This is the configuration that will be repackaged ...
        transitive = false // ... we don't want to repackage its dependencies ...
        visible = false
    }
    commonDeps {
        visible = false
    }
    compile.extendsFrom common // ... but we want to include it and its dependencies in the compile dependencies
}

dependencies {
    common project(':logging:common')
    testCompile project(path: ':logging:common', configuration: 'tests') // This configuration is defined and documented in the :logging:common project
}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.common] // only the common configuration should be repackaged.
}

jar {
    dependsOn shadowJar
    enabled = false
}

// region Publishing properties

// The dependencies of :logging:common should still be included in the POM as they are compile dependencies.
project(':logging:common').configurations.compile.dependencies.forEach {
    project.dependencies.add('commonDeps', it)
}
conf2ScopeMappings.addMapping(1, project.configurations.commonDeps, 'compile')

whenPomConfigured = { p ->
    p.dependencies = p.dependencies.findAll {
        it.scope != 'test'
    }
}

// endregion Publishing properties

